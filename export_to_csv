#!/usr/bin/env python3

import csv
import sys
# Vari√°veis para armazenar as classes
CircStatus = None
Controller = None 
InvalidRequest = None 

# Tenta encontrar as classes usando as 3 estruturas mais comuns:
try:
    # 1. Tenta a estrutura moderna (pip) com Controller, e InvalidRequest no topo
    from stem.control import Controller
    from stem import CircStatus, InvalidRequest # <-- MUDAN√áA AQUI: InvalidRequest movido
    print("DEBUG: Usando Controller e InvalidRequest do topo de stem.")
except ImportError:
    try:
        # 2. Tenta a estrutura antiga (Debian/apt)
        from stem import CircStatus, Controller, InvalidRequest
        print("DEBUG: Usando todas as classes de 'from stem'.")
    except ImportError:
        try:
            # 3. Tenta a estrutura com importa√ß√£o completa
            import stem.control
            from stem import CircStatus, InvalidRequest # <-- MUDAN√áA AQUI
            Controller = stem.control.Controller
            print("DEBUG: Usando importa√ß√£o de m√≥dulo completo (stem.control.Controller) e InvalidRequest do topo.")
        except ImportError:
            # Se todas falharem, o pacote n√£o est√° acess√≠vel
            print("\n‚ùå ERRO FATAL DE IMPORTA√á√ÉO:")
            print("Nenhuma das formas de importar o 'stem' funcionou. O pacote n√£o est√° instalado ou acess√≠vel.")
            sys.exit(1)

# Caminho onde o arquivo CSV ser√° salvo
csv_file_path = "/tmp/circuitos_tor.csv" 

print("Tentando conectar √† porta de controle do Tor...")

try:
    # Chama 'Controller' (o que funcionou na tentativa anterior)
    with Controller() as control_port: 
        circuit_data = []
        for circuit in control_port.get_circuits():
            
            if circuit.status == CircStatus.BUILT:
                path_str = " -> ".join(
                    f"{entry.nick} ({entry.fingerprint})" for entry in circuit.path
                )
                
                circuit_info = {
                    "id": circuit.id,
                    "status": circuit.status.name, 
                    "path": path_str,
                    "purpose": circuit.purpose.name, 
                }
                circuit_data.append(circuit_info)

        # Escreve os dados no CSV
        if circuit_data:
            keys = circuit_data[0].keys()
            with open(csv_file_path, 'w', newline='', encoding='utf-8') as output_file:
                dict_writer = csv.DictWriter(output_file, fieldnames=keys)
                dict_writer.writeheader()
                dict_writer.writerows(circuit_data)
            
            print(f"\nüéâ SUCESSO! Circuitos exportados para: {csv_file_path}")
            print(f"Total de circuitos exportados: {len(circuit_data)}")
        else:
            print("\n‚ö†Ô∏è NENHUM circuito Tor 'Built' (constru√≠do) ativo foi encontrado.")

# Trata a exce√ß√£o que agora deve estar dispon√≠vel
except InvalidRequest as exc: 
    print(f"\n‚ùå ERRO DE COMUNICA√á√ÉO. Verifique o Tor e as permiss√µes.")
    print(f"Mensagem: {exc}")
except ConnectionRefusedError:
    print(f"\n‚ùå ERRO DE CONEX√ÉO. O script n√£o conseguiu se conectar √† porta de controle do Tor (9051).")
    print("Certifique-se de que o Tor est√° rodando.")
except Exception as e:
    print(f"\n‚ùå Ocorreu um erro inesperado: {e}")
