#!/usr/bin/env python3

import csv
import sys
# N√£o precisa importar 'stem.control' aqui se estamos importando as classes espec√≠ficas
from stem import CircStatus, InvalidRequest # Exce√ß√µes e Status no topo

# Devido √† vers√£o do Tails, a classe de conex√£o √© Controller, n√£o ControlPort
try:
    from stem.control import Controller 
except ImportError:
    # Fallback caso a classe esteja diretamente no m√≥dulo 'stem'
    from stem import Controller 


# Caminho onde o arquivo CSV ser√° salvo (em /tmp, onde o debian-tor tem permiss√£o)
csv_file_path = "/tmp/circuitos_tor.csv" 
control_port = None # Inicializa a vari√°vel para o bloco finally

print("Tentando conectar √† porta de controle do Tor...")

try:
    # --- 1. TENTATIVA: Conex√£o via Socket Unix (o padr√£o mais seguro no Tails) ---
    socket_path = "/run/tor/control" 
    
    control_port = Controller.from_socket_path(path=socket_path)
    control_port.authenticate() 
    
    print(f"DEBUG: Conex√£o estabelecida via Socket Path: {socket_path}")

except Exception as e:
    # Se a conex√£o via socket falhar (ex: Erro 111, InvalidRequest, etc.), tenta a porta TCP
    
    try:
        # --- 2. TENTATIVA: Conex√£o via Porta TCP (9051) ---
        control_port = Controller.from_port(port=9051)
        control_port.authenticate()
        print("DEBUG: Conex√£o estabelecida via Porta TCP (9051)")
    except Exception as e_fallback:
        # Se as duas falharem, levanta o erro original (ou o mais recente)
        print("\n‚ùå ERRO CR√çTICO: Falha na conex√£o de controle do Tor.")
        print(f"Erro Original: {e}")
        print(f"Erro Fallback: {e_fallback}")
        sys.exit(1)


# L√≥gica de extra√ß√£o de dados (Finalmente, o seu c√≥digo funcionando!)
circuit_data = []

for circuit in control_port.get_circuits():
    
    if circuit.status == CircStatus.BUILT:
        path_str = " -> ".join(
            f"{entry.nick} ({entry.fingerprint})" for entry in circuit.path
        )
        
        circuit_info = {
            "id": circuit.id,
            "status": circuit.status.name, 
            "path": path_str,
            "purpose": circuit.purpose.name, 
        }
        circuit_data.append(circuit_info)

# L√≥gica de escrita do CSV
if circuit_data:
    keys = circuit_data[0].keys()
    with open(csv_file_path, 'w', newline='', encoding='utf-8') as output_file:
        dict_writer = csv.DictWriter(output_file, fieldnames=keys)
        dict_writer.writeheader()
        dict_writer.writerows(circuit_data)
    
    print(f"\nüéâ SUCESSO! Circuitos exportados para: {csv_file_path}")
    print(f"Total de circuitos exportados: {len(circuit_data)}")
else:
    print("\n‚ö†Ô∏è NENHUM circuito Tor 'Built' (constru√≠do) ativo foi encontrado.")

# Bloco de tratamento de erros e fechamento
try:
    if control_port:
        control_port.close()
except Exception:
    pass # Ignora erros ao tentar fechar
