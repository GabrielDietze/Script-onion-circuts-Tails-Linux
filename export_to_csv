#!/usr/bin/env python3

import csv
import sys
import stem.control

# Devido √† vers√£o da biblioteca 'stem' no Tails, as classes est√£o organizadas assim:
try:
    # 1. Tenta a forma de importa√ß√£o mais prov√°vel no Debian/Tails:
    from stem.control import Controller # Classe de Conex√£o (era ControlPort)
    from stem import CircStatus, InvalidRequest # Classes de Status e Exce√ß√£o
    
except ImportError:
    # Fallback caso a organiza√ß√£o das classes seja diferente:
    try:
        from stem import CircStatus, Controller, InvalidRequest
    except ImportError:
        print("\n‚ùå ERRO FATAL DE IMPORTA√á√ÉO: A biblioteca 'stem' n√£o pode ser acessada.")
        print("Certifique-se de que 'python3-stem' est√° instalado via APT.")
        sys.exit(1)


# Caminho onde o arquivo CSV ser√° salvo (Usando /tmp para evitar problemas de permiss√£o)
csv_file_path = "/tmp/circuitos_tor.csv" 
control_port = None # Inicializa a vari√°vel para garantir que ela exista no 'finally'

print("Tentando conectar √† porta de controle do Tor...")

try:
    # Solu√ß√£o do erro 'missing required positional argument':
    # Conecta explicitamente √† porta padr√£o 9051 e autentica (necess√°rio na sua vers√£o).
    control_port = Controller.from_port(port=9051)
    control_port.authenticate() 
    
    circuit_data = []
    
    # Itera sobre os circuitos (o restante da l√≥gica √© o seu c√≥digo original)
    for circuit in control_port.get_circuits():
        
        if circuit.status == CircStatus.BUILT:
            path_str = " -> ".join(
                f"{entry.nick} ({entry.fingerprint})" for entry in circuit.path
            )
            
            circuit_info = {
                "id": circuit.id,
                "status": circuit.status.name, 
                "path": path_str,
                "purpose": circuit.purpose.name, 
            }
            circuit_data.append(circuit_info)

    # Escreve os dados no CSV
    if circuit_data:
        keys = circuit_data[0].keys()
        with open(csv_file_path, 'w', newline='', encoding='utf-8') as output_file:
            dict_writer = csv.DictWriter(output_file, fieldnames=keys)
            dict_writer.writeheader()
            dict_writer.writerows(circuit_data)
        
        print(f"\nüéâ SUCESSO! Circuitos exportados para: {csv_file_path}")
        print(f"Total de circuitos exportados: {len(circuit_data)}")
    else:
        print("\n‚ö†Ô∏è NENHUM circuito Tor 'Built' (constru√≠do) ativo foi encontrado.")

# Tratamento de Erros
except InvalidRequest as exc: 
    print(f"\n‚ùå ERRO DE COMUNICA√á√ÉO (InvalidRequest).")
    print("Verifique se o Tor est√° completamente conectado e rodando.")
    print(f"Mensagem: {exc}")
except ConnectionRefusedError:
    print(f"\n‚ùå ERRO DE CONEX√ÉO. O script n√£o conseguiu se conectar √† porta de controle do Tor (9051).")
    print("No Tails, inicie/reinicie o Tor Browser e tente novamente.")
except Exception as e:
    print(f"\n‚ùå Ocorreu um erro inesperado: {e}")
    
finally:
    # Garante que a conex√£o seja fechada, mesmo se ocorrer um erro
    if control_port:
        control_port.close()
